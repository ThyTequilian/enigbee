#include "plugBoard.hpp"


void constexpr PlugBoard::createBoard() {
	for (MessageElement i = (MessageElement)L"a"; i <= (MessageElement)L"z"; i++) {
		board[i] = i;
	}
}

auto PlugBoard::plug(const MessageElement &from, const MessageElement &to) -> tl::expected<void, ENIGERR> {
	if (checkElement(from) || checkElement(to)) {
		return tl::make_unexpected(ENIGERR::characterOutOfRange);
	}
	board[from] = to;
	board[to] = from;
}

auto PlugBoard::encode(const MessageElement& element) -> tl::expected<MessageElement, ENIGERR> {
	if (checkElement(element)) {
		return tl::make_unexpected(ENIGERR::characterOutOfRange);
	}
	return board[element];
}

bool PlugBoard::checkElement(const MessageElement& element) {
	return ((MessageElement)L"a" < element && (MessageElement)L"z" > element);
}